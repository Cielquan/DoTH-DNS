version: '3.5'


networks:
  dns_network:
    name: dns_network
    driver: bridge
    driver_opts:
      encrypted: "true"
    ipam:
      config:
        - subnet: 172.16.1.0/24
    attachable: false


services:
  # DoH server container
  doh_server:
    container_name: doh_server
    hostname: ${HOSTNAME:-dns_server}
    image: cielquan/doh_server:latest
    environment:
      - TZ=${TIMEZONE:-Europe/Berlin}
    volumes:
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
      - type: bind
        source: ./doh-docker/doh-server.conf
        target: /opt/dns-over-https/doh-server.conf
    expose:
      - "8053"
    networks:
      dns_network:
        ipv4_address: 172.16.1.2
    restart: always
    labels:
      - traefik.enable=true

      # Filter incomming
      - traefik.http.routers.DohServer.rule=Host(`doh.${DOMAIN}`) && Path(`/dns-query`)
      - traefik.http.routers.DohServer.entrypoints=websecure
      # Forward to service
      - traefik.http.services.DohServer.loadbalancer.server.port=8053
      - traefik.http.routers.DohServer.service=DohServer

  # pihole container
  pihole:
    container_name: pihole
    hostname: ${HOSTNAME:-dns_server}
    depends_on:
      - unbound
    image: pihole/pihole:latest
    environment:
      - TZ=${TIMEZONE:-Europe/Berlin}
      - ServerIP=${HOST_IP}
      - DNS1=208.67.222.222#53  # OpenDNS, only for initial boot
      - DNS2=no
      - DOMAIN=${DOMAIN}
      - HOST_IP=${HOST_IP}
    volumes:
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
      - type: bind
        source: ./pihole-docker/data/resolv.conf
        target: /etc/resolv.conf
        read_only: true
      - type: bind
        source: ./pihole-docker/data/pihole/
        target: /etc/pihole/
      - type: bind
        source: ./pihole-docker/data/dnsmasq.d/
        target: /etc/dnsmasq.d/
      # s6 scripts
      - type: bind
        source: ./pihole-docker/s6_scripts/cont-init.d/01-conf-dnsmasq.sh
        target: /etc/cont-init.d/01-conf-dnsmasq.sh
      - type: bind
        source: ./pihole-docker/s6_scripts/cont-init.d/21-conf-dns.sh
        target: /etc/cont-init.d/21-conf-dns.sh
      - type: bind
        source: ./pihole-docker/s6_scripts/fix-attrs.d/02-chown-pihole-configs
        target: /etc/fix-attrs.d/02-chown-pihole-configs
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    expose:
      - "80"
    networks:
      dns_network:
        ipv4_address: 172.16.1.3
    dns:
      - 127.0.0.1
    restart: always
    labels:
      - traefik.enable=true

      # pihole dashboard

      # Filter incomming
      - traefik.http.routers.PiholeGui.rule=Host(`pihole.${DOMAIN}`)
      - traefik.http.routers.PiholeGui.entrypoints=websecure
      # Make sure /admin is at the start of the path
      - traefik.http.middlewares.AddAdminPath.replacepathregex.regex=^/((?i:(admin)/{0,1}|.{0})(.*))
      - traefik.http.middlewares.AddAdminPath.replacepathregex.replacement=/admin/$$3
      - traefik.http.routers.PiholeGui.middlewares=AddAdminPath
      # Forward to service
      - traefik.http.services.PiholeGui.loadbalancer.server.port=80
      - traefik.http.routers.PiholeGui.service=PiholeGui

      # DoT forward

      # Filer incomming
      - traefik.tcp.routers.PiholeDot.rule=HostSNI(`dot.${DOMAIN}`)
      - traefik.tcp.routers.PiholeDot.entrypoints=dot
      # Forward to service
      - traefik.tcp.services.PiholeDns.loadbalancer.server.port=53
      - traefik.tcp.routers.PiholeDot.service=PiholeDns


  # unbound container
  unbound:
    container_name: unbound
    hostname: ${HOSTNAME:-dns_server}
    image: mvance/unbound:latest
    environment:
      - TZ=${TIMEZONE:-Europe/Berlin}
    volumes:
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
      - type: bind
        source: ./unbound-docker/data
        target: /opt/unbound/etc/unbound/
      - type: bind
        source: ./unbound-docker/unbound.sh
        target: /unbound.sh
        read_only: true
    expose:
      - "53"
    networks:
      dns_network:
        ipv4_address: 172.16.1.4
    restart: always
    labels:
      - traefik.enable=false


  # tr√¶fik container
  traefik:
    container_name: traefik
    hostname: ${HOSTNAME:-dns_server}
    image: traefik:v3.0
    environment:
      - TZ=${TIMEZONE:-Europe/Berlin}
      - NAMECOM_API_TOKEN=${NAMECOM_API_TOKEN}
      - NAMECOM_USERNAME=${NAMECOM_USERNAME}
    volumes:
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
      - type: bind
        source: ./traefik-docker/data/traefik/
        target: /etc/traefik/
      - type: bind
        source: ./traefik-docker/data/auth/
        target: /var/run/traefik-auth/
        read_only: true
    ports:
      - "80:80"
      - "443:443"
      - "853:853"
      - "8080:8080"
    networks:
      dns_network:
        ipv4_address: 172.16.1.5
    restart: always
    labels:
      - traefik.enable=true

      # traefik dashboard

      # Filter incomming
      - traefik.http.routers.Traefik.rule=Host(`traefik.${DOMAIN}`)
      - traefik.http.routers.Traefik.entrypoints=websecure
      # Add basic auth to dashboard
      - traefik.http.middlewares.TraefikAuth.basicauth.usersfile=/var/run/traefik-auth/.htpasswd
      - traefik.http.routers.Traefik.middlewares=TraefikAuth
      # Forward to service
      - traefik.http.routers.Traefik.service=api@internal
